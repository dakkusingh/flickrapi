<?php

/**
 * @file
 * FlickAPI integration module.
 */

module_load_include('inc', 'flickapi', 'flickrapi.admin');

/**
 * Implements hook_menu().
 */
function flickrapi_menu() {
  $items = array();
  $items['admin/config/media/flickrapi'] = array(
    'title' => 'Flickr API Settings',
    'description' => 'Configure Flickr API credentials.',
    'access arguments' => array('configure flickr api'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flickrapi_admin_settings'),
    'file' => 'flickrapi.admin.inc',
  );
  $items['admin/config/media/flickrapi/authenticate'] = array(
    'title' => 'Authenticate Flickr Credentials',
    'access arguments' => array('configure flickr api'),
    'page callback' => 'flickrapi_oauth_authenticate',
    'file' => 'flickrapi.admin.inc',
  );
  $items['admin/config/media/flickrapi/clear'] = array(
    'title' => 'Clear Flickr Credentials',
    'access arguments' => array('configure flickr api'),
    'page callback' => 'flickrapi_oauth_clear',
    'file' => 'flickrapi.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function flickrapi_permission() {
  return array(
    'configure flickr api' => array(
      'title' => t('Configure Flickr API'),
      'description' => t('Set API keys and cache times for flickr queries'),
    ),
  );
}

/**
 * Returns the phpFlickr object.
 *
 * If we need to change anything, such as making the cache configuration,
 * then it'll all be done here.
 */
function flickrapi_phpFlickr() {
  $api_key = variable_get('flickrapi_api_key', '');
  $api_secret = variable_get('flickrapi_api_secret', '');
  if (!$api_key) {
    drupal_set_message(t("Flickr API key not set"), 'error');
    if (user_access('configure flickr api')) {
      drupal_set_message(t('Please !configure', array('!link' => l(t('configure the Flickr API settings'), 'admin/config/media/flickrapi'))));
    }
  }
  $flickr = new phpFlickr($api_key, $api_secret);
  $flickr->enableCache("fs", variable_get('flickrapi_cache_path', '/tmp'));
  return $flickr;
}

/**
 * Tries to match an 'identifier' onto a flickr nsid
 *
 * This function will first see whether $identifier is already
 * a nsid (format check only, no api call).  If it is not and the
 * identifier has the format of an email, an api call will be made to
 * check whether there is an nsid for that email.  If this is not the
 * case, the $identifier is treated as a username and an api call is
 * made to find the nsid for that username.
 *
 * If none of these succees, the result will be false
 *
 * @param Array $identifier
 *   identifier to find an nsid for
 *
 * @return String
 *   valid nsid or false if none can be found
 */
function flickrapi_get_user_nsid($identifier) {
  if (flickrapi_is_nsid($identifier)) {
    // Identifier is an NSID.
    return $identifier;
  }
  $f = flickrapi_phpFlickr();
  if (valid_email_address($identifier) && ($user = $f->people_findByEmail($identifier))) {
    return $user['nsid'];
  }
  if ($user = $f->people_findByUsername($identifier)) {
    return $user['nsid'];
  }

  return FALSE;
}

/**
 * Do a preg_match to check if the given ID is a valid Flickr user ID.
 *
 * @param String $id
 *   identifier to find an nsid for
 *
 * @return Boolean
 *   TRUE/FALSE
 */
function flickrapi_is_nsid($id) {
  return preg_match('/^\d+@N\d+$/', $id) ? TRUE : FALSE;
}
